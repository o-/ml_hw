
R version 3.4.3 (2017-11-30) -- "Kite-Eating Tree"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Multiple plot function
> #
> # ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
> # - cols:   Number of columns in layout
> # - layout: A matrix specifying the layout. If present, 'cols' is ignored.
> #
> # If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
> # then plot 1 will go in the upper left, 2 will go in the upper right, and
> # 3 will go all the way across the bottom.
> #
> multiplot <- function(..., title=NULL, plotlist=NULL, file, cols=1, layout=NULL) {
+   library(grid)
+ 
+   # Make a list from the ... arguments and plotlist
+   plots <- c(list(...), plotlist)
+ 
+   numPlots = length(plots)
+ 
+   # If layout is NULL, then use 'cols' to determine layout
+   if (is.null(layout)) {
+     # Make the panel
+     # ncol: Number of columns of plots
+     # nrow: Number of rows needed, calculated from # of cols
+     layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
+                     ncol = cols, nrow = ceiling(numPlots/cols))
+   }
+ 
+  if (numPlots==1) {
+     print(plots[[1]])
+ 
+   } else {
+     # Set up the page
+     grid.newpage()
+     pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
+ 
+     # Make each plot, in the correct location
+     for (i in 1:numPlots) {
+       # Get the i,j matrix positions of the regions that contain this subplot
+       matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
+ 
+       print(plots[[i]] + ggtitle(NULL), vp = viewport(layout.pos.row = matchidx$row,
+                                       layout.pos.col = matchidx$col))
+     }
+   }
+ }
> 
> 
> replot = TRUE
> 
> 
> data = read.csv('rbench.csv')
> data = data[which(!grepl("harness", data$benchmark)),]
> 
> library(e1071)
> #library(kernlab)
> library(ggplot2)
> 
> bm_names = sort(unique(data$benchmark))
> 
> l = length(bm_names)
> w = length(data[data$benchmark == bm_names[[1]],1])
> w = w - w%%100
> 
> clustering <- matrix(vector("numeric", l*w), ncol = w)
> 
> for (bm in bm_names) {
+   cat(bm, "\n")
+ 
+   s = data[data$benchmark == bm,]
+ 
+   # remove half done runs
+   s = s[1:(length(s$time)-(length(s$time)%%100)),]
+ 
+   #remove unnecessary rows
+   s = s[,(names(s) %in% c("time","R_NGrowIncrFrac","R_NGrowFrac","R_MaxKeepFrac","R_MinFreeFrac"))]
+   ii = which(bm_names == bm)
+ 
+   s$good_time = TRUE
+ #  s$good_mem = 2
+   s$good_time[which(s$time > min(s$time)*1.03)] = FALSE
+ #  s$good_mem[which(s$mem > min(s$mem)*1.04)] = 1
+ 
+   s$good_time = factor(s$good_time)
+ 
+   if(replot) {
+       plots2 <- list(
+         ggplot(s, aes(x=R_NGrowFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_NGrowIncrFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_MaxKeepFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+ 
+         ggplot(s, aes(x=R_NGrowFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_MaxKeepFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"),
+ 
+         ggplot(s, aes(x=R_NGrowFrac, y=R_MaxKeepFrac)) +
+                      geom_tile(aes(fill=time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"))
+ 
+        jpeg(filename = paste("out/",bm,"_real.jpg",sep=""), width=1024, height=1024)
+        multiplot(title=bm, plotlist=plots2, layout=matrix(c(2,3,1,0,5,4,0,0,6),nrow=3))
+        dev.off()
+ 
+       plots2 <- list(
+         ggplot(s, aes(x=R_NGrowFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_NGrowIncrFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_MaxKeepFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+ 
+         ggplot(s, aes(x=R_NGrowFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(s, aes(x=R_MaxKeepFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"),
+ 
+         ggplot(s, aes(x=R_NGrowFrac, y=R_MaxKeepFrac)) +
+                      geom_tile(aes(fill=good_time), alpha=0.1) +
+                       ggtitle(bm) + theme(legend.position="none"))
+ 
+        jpeg(filename = paste("out/",bm,"_class.jpg",sep=""), width=1024, height=1024)
+        multiplot(title=bm, plotlist=plots2, layout=matrix(c(2,3,1,0,5,4,0,0,6),nrow=3))
+        dev.off()
+ 
+   }
+   s = s[, !(names(s) %in% c("time"))]
+ 
+ 
+   ratio = length(which(s$good_time == TRUE)) / length(s$good_time)
+   if (ratio > 0.95 || ratio < 0.05) {
+     cat(bm, " has no time dependencies\n")
+     clustering[ii,1] <- -10000
+     clustering[ii,2] <- 10000
+   } else {
+ 
+     tuned = tune.svm(good_time~., data =s, gamma=seq(0.02,0.12,0.01), cost=seq(0.5,1.5,0.3),
+                      tunecontrol=tune.control(cross=10),
+                      type="C-classification", kernel="radial")
+     #m = svm(good_time~., data =s, type="C-classification", kernel="radial")
+     print(tuned)
+ 
+     m = tuned$best.model
+     #m = svm(good_time ~ R_NGrowIncrFrac + R_NGrowFrac + R_MaxKeepFrac + R_MinFreeFrac, data=s,type="C-classification", kernel="radial", cost=0.5)
+     # m = svm(good_time ~., data=s,type="C-classification", kernel="radial", gamma=0.02, cost=0.5)
+ 
+     if (length(clustering[ii,]) > length(m$decision.values))
+       clustering[ii,] <- c(m$decision.values, m$decision.values[[length(m$decision.values)]])
+     else
+       clustering[ii,] <- m$decision.values
+ 
+     if (replot) {
+       f <- expand.grid(
+         R_NGrowIncrFrac = seq(min(s$R_NGrowIncrFrac)-0.1, max(s$R_NGrowIncrFrac)+0.1, 0.03),
+         R_NGrowFrac = seq(min(s$R_NGrowFrac)-0.1, max(s$R_NGrowFrac)+0.1, 0.03),
+         R_MaxKeepFrac = seq(min(s$R_MaxKeepFrac)-0.1, max(s$R_MaxKeepFrac)+0.1, 0.03),
+         R_MinFreeFrac = seq(min(s$R_MinFreeFrac)-0.1, max(s$R_MinFreeFrac)+0.1, 0.03)
+       )
+ 
+       f$prediction = predict(m, newdata=f)
+ 
+       plots1 <- list(
+         ggplot(f, aes(x=R_NGrowFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(f, aes(x=R_NGrowIncrFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(f, aes(x=R_MaxKeepFrac, y=R_MinFreeFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(f, aes(x=R_NGrowFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+         ggplot(f, aes(x=R_MaxKeepFrac, y=R_NGrowIncrFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"),
+ 
+         ggplot(f, aes(x=R_NGrowFrac, y=R_MaxKeepFrac)) +
+                      geom_tile(aes(fill=prediction), alpha=0.05) +
+                       ggtitle(bm) + theme(legend.position="none"));
+ 
+    jpeg(filename = paste("out/",bm,"_svm.jpg",sep=""), width=1024, height=1024)
+    multiplot(title=bm, plotlist=plots1, layout=matrix(c(2,3,1,0,5,4,0,0,6),nrow=3))
+    dev.off()
+     }
+  }
+ }
binary-trees_2.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.06333333 

binary-trees_list.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.1066667 

binary-trees_native.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.11  1.4

- best performance: 0 

binary-trees.R 
binary-trees.R  has no time dependencies
black_scholes.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.006666667 

cleaning.R 
cleaning.R  has no time dependencies
crt.R 
crt.R  has no time dependencies
DoubleNAVecAdd-T1.R 
DoubleNAVecAdd-T1.R  has no time dependencies
DoubleNAVecAdd-T2.R 
DoubleNAVecAdd-T2.R  has no time dependencies
DoubleVecAdd-T1.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.06333333 

DoubleVecAdd-T2.R 
DoubleVecAdd-T2.R  has no time dependencies
example.R 
example.R  has no time dependencies
fannkuch-redux_2.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1 

fannkuch-redux_native.R 
fannkuch-redux_native.R  has no time dependencies
fannkuch-redux.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.2366667 

fasta_c.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.17 

fasta-2.R 
fasta-2.R  has no time dependencies
fasta-3.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.06 

fasta-native.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.08 

fasta-native2.R 
fasta-native2.R  has no time dependencies
fasta.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.07 

fastaredux-native.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.09  0.8

- best performance: 0.3433333 

fastaredux.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.05333333 

fib_rec.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.1766667 

fib.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.07 

filter1d.R 
filter1d.R  has no time dependencies
ForLoopAdd.R 
ForLoopAdd.R  has no time dependencies
gcd_rec.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1233333 

gcd.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1866667 

histogram.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.08666667 

ica_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.1

- best performance: 0.06666667 

IntNAVecAdd-T1.R 
IntNAVecAdd-T1.R  has no time dependencies
IntNAVecAdd-T2.R 
IntNAVecAdd-T2.R  has no time dependencies
IntVecAdd-T1.R 
IntVecAdd-T1.R  has no time dependencies
IntVecAdd-T2.R 
IntVecAdd-T2.R  has no time dependencies
k-means_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.2166667 

k-means-1D_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.09  1.4

- best performance: 0.1266667 

k-means-1D.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1 

k-means.R 
k-means.R  has no time dependencies
k-NN_lapply.R 
k-NN_lapply.R  has no time dependencies
k-NN.R 
k-NN.R  has no time dependencies
LR_lms_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.1066667 

LR_ols_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.1333333 

LR-1var_lms_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.06  0.5

- best performance: 0.1833333 

LR-1var_lms_vec.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.01333333 

LR-1var_ols_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.09  1.4

- best performance: 0.04666667 

LR-1var.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
   0.1  1.1

- best performance: 0.13 

LR.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.11  1.4

- best performance: 0.09333333 

mandelbrot-ascii.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.03  0.5

- best performance: 0.08333333 

mandelbrot-native-ascii.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1466667 

mandelbrot-native.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.03  0.5

- best performance: 0.3233333 

mandelbrot-noout-native.R 
mandelbrot-noout-native.R  has no time dependencies
mandelbrot-noout.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.006666667 

mandelbrot.R 
mandelbrot.R  has no time dependencies
mandelbrot1.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0 

meteor-contest.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.1633333 

MMM-T1.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.06333333 

MMM-T2.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.12 

MMM-T3.R 
MMM-T3.R  has no time dependencies
nbody-1.R 
nbody-1.R  has no time dependencies
nbody-2.R 
nbody-2.R  has no time dependencies
nbody-3.R 
nbody-3.R  has no time dependencies
nbody-native.R 
nbody-native.R  has no time dependencies
nbody-native2.R 
nbody-native2.R  has no time dependencies
nbody-vectorized.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.15 

nbody.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.17 

NN_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.09666667 

NN.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.07333333 

Pi_lapply.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.08666667 

pidigits.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.09 

pidigits2.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.11  0.8

- best performance: 0.1866667 

prime.R 
prime.R  has no time dependencies
raysphere.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.01666667 

regexdna.R 
regexdna.R  has no time dependencies
revcomp-1.R 
revcomp-1.R  has no time dependencies
revcomp-native.R 
revcomp-native.R  has no time dependencies
rw2d1.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.31 

rw2d2.R 
rw2d2.R  has no time dependencies
rw2d3.R 
rw2d3.R  has no time dependencies
sample_builtin.R 
sample_builtin.R  has no time dependencies
sample.R 
sample.R  has no time dependencies
smv_builtin.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.1866667 

smv.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.4

- best performance: 0.07333333 

spectral-norm-1.R 
spectral-norm-1.R  has no time dependencies
spectral-norm-alt.R 
spectral-norm-alt.R  has no time dependencies
spectral-norm-alt2.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.12 

spectral-norm-alt3.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.11  1.4

- best performance: 0.23 

spectral-norm-alt4.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.12  1.1

- best performance: 0.2833333 

spectral-norm-math.R 
spectral-norm-math.R  has no time dependencies
spectral-norm-native.R 
spectral-norm-native.R  has no time dependencies
spectral-norm-vectorized.R 

Parameter tuning of ‘svm’:

- sampling method: 10-fold cross validation 

- best parameters:
 gamma cost
  0.02  0.5

- best performance: 0.09666667 

spectral-norm.R 
spectral-norm.R  has no time dependencies
> 
> library(NbClust)
> ks = kmeans(clustering, 16, nstart=8000)
> 
> cat(paste(ks$cluster, collapse="\n"),"\n")
7
7
6
14
10
14
14
14
14
8
14
14
8
14
8
8
14
11
8
14
8
11
8
8
8
14
14
8
8
8
7
14
14
14
14
5
5
8
14
14
14
8
13
4
3
16
12
1
10
8
15
14
10
14
10
8
8
1
14
14
14
14
14
14
8
11
8
8
16
8
8
14
10
14
14
14
8
14
14
14
14
9
6
14
14
8
4
2
14
14
8
14 
> 
> 
> for (i in 1:16) {
+   cat("==========\n");
+   for (ii in 1:length(bm_names)) {
+     if (ks$cluster[[ii]] == i)
+       cat(" * ", as.character(bm_names[[ii]]), "\n")
+   }
+ }
==========
 *  LR.R 
 *  MMM-T2.R 
==========
 *  spectral-norm-alt4.R 
==========
 *  LR-1var_lms_vec.R 
==========
 *  LR-1var_lms_lapply.R 
 *  spectral-norm-alt3.R 
==========
 *  k-means_lapply.R 
 *  k-means-1D_lapply.R 
==========
 *  binary-trees_native.R 
 *  smv.R 
==========
 *  binary-trees_2.R 
 *  binary-trees_list.R 
 *  ica_lapply.R 
==========
 *  DoubleVecAdd-T1.R 
 *  fannkuch-redux_2.R 
 *  fannkuch-redux.R 
 *  fasta_c.R 
 *  fasta-native.R 
 *  fasta.R 
 *  fastaredux.R 
 *  fib_rec.R 
 *  fib.R 
 *  gcd_rec.R 
 *  gcd.R 
 *  histogram.R 
 *  k-means-1D.R 
 *  LR_lms_lapply.R 
 *  mandelbrot-native-ascii.R 
 *  meteor-contest.R 
 *  MMM-T1.R 
 *  nbody-vectorized.R 
 *  NN_lapply.R 
 *  NN.R 
 *  pidigits.R 
 *  pidigits2.R 
 *  rw2d1.R 
 *  spectral-norm-alt2.R 
 *  spectral-norm-vectorized.R 
==========
 *  smv_builtin.R 
==========
 *  black_scholes.R 
 *  mandelbrot-ascii.R 
 *  mandelbrot-noout.R 
 *  mandelbrot1.R 
 *  raysphere.R 
==========
 *  fasta-3.R 
 *  fastaredux-native.R 
 *  nbody.R 
==========
 *  LR-1var.R 
==========
 *  LR_ols_lapply.R 
==========
 *  binary-trees.R 
 *  cleaning.R 
 *  crt.R 
 *  DoubleNAVecAdd-T1.R 
 *  DoubleNAVecAdd-T2.R 
 *  DoubleVecAdd-T2.R 
 *  example.R 
 *  fannkuch-redux_native.R 
 *  fasta-2.R 
 *  fasta-native2.R 
 *  filter1d.R 
 *  ForLoopAdd.R 
 *  IntNAVecAdd-T1.R 
 *  IntNAVecAdd-T2.R 
 *  IntVecAdd-T1.R 
 *  IntVecAdd-T2.R 
 *  k-means.R 
 *  k-NN_lapply.R 
 *  k-NN.R 
 *  mandelbrot-noout-native.R 
 *  mandelbrot.R 
 *  MMM-T3.R 
 *  nbody-1.R 
 *  nbody-2.R 
 *  nbody-3.R 
 *  nbody-native.R 
 *  nbody-native2.R 
 *  prime.R 
 *  regexdna.R 
 *  revcomp-1.R 
 *  revcomp-native.R 
 *  rw2d2.R 
 *  rw2d3.R 
 *  sample_builtin.R 
 *  sample.R 
 *  spectral-norm-1.R 
 *  spectral-norm-alt.R 
 *  spectral-norm-math.R 
 *  spectral-norm-native.R 
 *  spectral-norm.R 
==========
 *  mandelbrot-native.R 
==========
 *  LR-1var_ols_lapply.R 
 *  Pi_lapply.R 
> 
> 
> print(ks$betweenss/ ks$totss)
[1] 0.9999998
> 
